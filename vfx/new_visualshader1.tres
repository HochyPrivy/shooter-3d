[gd_resource type="VisualShader" load_steps=18 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=2]
operator = 8

[sub_resource type="VisualShaderNodeColorConstant" id=3]
constant = Color( 0.833344, 0.134019, 0.134019, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=4]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=16]
function = 0

[sub_resource type="VisualShaderNodeScalarClamp" id=17]
default_input_values = [ 0, 0.0, 1, 0.8, 2, 1.0 ]

[sub_resource type="VisualShaderNodeScalarFunc" id=18]
function = 0

[sub_resource type="VisualShaderNodeColorConstant" id=19]
constant = Color( 0.0428797, 0.0490624, 0.0243932, 1 )

[sub_resource type="VisualShaderNodeColorFunc" id=5]

[sub_resource type="OpenSimplexNoise" id=6]
octaves = 2
period = 7.6
persistence = 1.0
lacunarity = 4.0

[sub_resource type="NoiseTexture" id=7]
noise = SubResource( 6 )

[sub_resource type="VisualShaderNodeTexture" id=8]
texture = SubResource( 7 )

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=10]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarUniform" id=12]
uniform_name = "Outline_Width"

[sub_resource type="VisualShaderNodeScalarOp" id=13]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.1 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=14]
function = 15

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;

uniform sampler2D tex_frg_3;



void vertex() {
// Output:0

}

void fragment() {
// Color:16
	vec3 n_out16p0 = vec3(0.042880, 0.049062, 0.024393);
	float n_out16p1 = 1.000000;

// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out6p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Input:4
	float n_out4p0 = TIME;

// ScalarOp:5
	float n_in5p1 = 0.00000;
	float n_out5p0 = n_out4p0 - n_in5p1;

// ScalarClamp:14
	float n_in14p1 = 0.80000;
	float n_in14p2 = 1.00000;
	float n_out14p0 = clamp(n_out5p0, n_in14p1, n_in14p2);

// ScalarOp:8
	float n_out8p0 = dot(n_out3p0, vec3(0.333333, 0.333333, 0.333333)) - n_out14p0;

// ScalarFunc:9
	float n_out9p0 = round(n_out8p0);

// ScalarOp:12
	float n_in12p1 = 0.50000;
	float n_out12p0 = n_out9p0 - n_in12p1;

// Color:11
	vec3 n_out11p0 = vec3(0.833344, 0.134019, 0.134019);
	float n_out11p1 = 1.000000;

// VectorOp:10
	vec3 n_out10p0 = cross(vec3(n_out12p0), n_out11p0);

// Output:0
	ALBEDO = n_out16p0;
	ALPHA = n_out12p0;
	METALLIC = dot(n_out10p0, vec3(0.333333, 0.333333, 0.333333));
	ROUGHNESS = dot(n_out10p0, vec3(0.333333, 0.333333, 0.333333));
	SPECULAR = dot(n_out10p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -405.757, 35.6833 )
nodes/fragment/0/position = Vector2( 1000, 100 )
nodes/fragment/2/node = SubResource( 5 )
nodes/fragment/2/position = Vector2( 120, 120 )
nodes/fragment/3/node = SubResource( 8 )
nodes/fragment/3/position = Vector2( -180, 220 )
nodes/fragment/4/node = SubResource( 9 )
nodes/fragment/4/position = Vector2( -800, 220 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( -720, 320 )
nodes/fragment/6/node = SubResource( 11 )
nodes/fragment/6/position = Vector2( -340, 300 )
nodes/fragment/7/node = SubResource( 12 )
nodes/fragment/7/position = Vector2( -440, 80 )
nodes/fragment/8/node = SubResource( 13 )
nodes/fragment/8/position = Vector2( 40, 200 )
nodes/fragment/9/node = SubResource( 14 )
nodes/fragment/9/position = Vector2( 300, 200 )
nodes/fragment/10/node = SubResource( 2 )
nodes/fragment/10/position = Vector2( 460, 460 )
nodes/fragment/11/node = SubResource( 3 )
nodes/fragment/11/position = Vector2( 100, 520 )
nodes/fragment/12/node = SubResource( 4 )
nodes/fragment/12/position = Vector2( 280, 300 )
nodes/fragment/13/node = SubResource( 16 )
nodes/fragment/13/position = Vector2( -540, 480 )
nodes/fragment/14/node = SubResource( 17 )
nodes/fragment/14/position = Vector2( -200, 500 )
nodes/fragment/15/node = SubResource( 18 )
nodes/fragment/15/position = Vector2( -520, 380 )
nodes/fragment/16/node = SubResource( 19 )
nodes/fragment/16/position = Vector2( 394.91, 39.864 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 6, 0, 3, 0, 3, 0, 8, 0, 11, 0, 10, 1, 9, 0, 12, 0, 12, 0, 10, 0, 5, 0, 13, 0, 14, 0, 8, 1, 5, 0, 15, 0, 5, 0, 14, 0, 10, 0, 0, 3, 12, 0, 0, 1, 10, 0, 0, 2, 16, 0, 0, 0, 10, 0, 0, 4, 8, 0, 9, 0 )
